// This file is part of a bigger Asciidoctor Book, so it may not compile or the output will
// not have the desired content.

== Content Management: JFrog Artifactory

As a central service of each company, Content Management (based on a software library) will hold any versioned
software artifacts (source or binary) that are relevant for production use.
The Content Governor will use different provided services to accomplish the
tasks of the content management domain. For the purpose of this Reference
Implementation we use JFrog Artifactory Pro (short: Artifactory).

Artifactory will not only be the central point of content ingestion, but will
also be used as a repository for intermediate binary artifacts, such as
container images or JAR files.

From this central content repository, container images will be pulled into the production environment.

=== Artifactory Components

==== Artifactory Pro

The main component is Artifactory Pro, a Java based application, which may be deployed on {OCP} or a separate host as a standalone application. A base configuration of the application is done via a ConfigMap ({OCP} case) or classic configuration files (standalone case). Data is stored one volumes/disks and a (persistent) PostgreSQL database. Customization, such as creation of repositories required for ACME Corp IT-Dev operation, is done via an Ansible playbook.

==== Storage and Database

Storage for artifacts and the PostgreSQL database is provided via NFS-backed PersistentVolumes ({OCP}) or the local filesystems of the host running Artifactory. The PostgreSQL database is used exclusively for Artifactory. PersistentVolumes are provisioned from one NFS server and are not backed up. In a production environment this would be considered a single point of failure (SPOF) and must be avoided, it is {oos}.

==== Reverse Proxy

To implement https://www.jfrog.com/confluence/display/RTF/Docker+Registry#DockerRegistry-RegistriesandRepositories[Artifactory’s requirements on how to act as a docker registry] a NGINX based reverse proxy is implemented. This will rewrite URL and pass them on to the Artifactory Pro component.

All components can be deployed and undeployed from a single {OCP} template via an Ansible playbook.

The following diagram provides an overview of the content management architecture.

.Content Management Architecture Overview
image::images/cont-mgmt-architecture.png[Content Management Architecture Overview]


=== Interactions - User Stories

==== Administration by Content Governor (1)
The first interaction pattern implemented is related to content management,
including creation of local and remote repositories etc. A role call Content
Governor would either execute manual task via the Artifactory web user interface
or automated tasks via the REST API. Both interfaces offer the same functions.

==== Pulling Content for Builds (2)
The second interaction pattern is related to {OCP} Builds and ImageStreams. They
interface with Artifactory via HTTP/HTTPS to access Docker, Maven, NPM or Bower
repositories. In the case of Docker repository access a reverse proxy (3) is
used to translate docker registry interactions to Artifactory repository
interactions. This is required as Artifactory can host any number of Docker
registries, see the Artifactory documentation for details on Registries and
Repositories. All other repositories are accessed directly (4) without the need
of a reverse proxy.

Artifactory configuration and repository data is stored in a PostgreSQL database
and on a persistent storage volume, provided by a NFS server (5).

==== Proxying Content from remote Repositories (6)
All so called remote repositories implement a caching proxy for remote/upstream
repositories. Content within these repositories is cached for a certain amount
of time on storage. This is especially useful to speed up {OCP} Builds, as
required content must not be downloaded from the internet but from Artifactory’s
caching repository.


=== Implementation of Content Management

Two scenarios for implementation of the Content Management Services are feasible:

 * Artifactory and the reverse proxy via RPMs on a separate host
 * Artifactory and the reverse proxy as containerized components on {OCP}

==== Deploying Artifactory

ifndef::artifactory-on-openshift[]
WARNING: We aim to deploy all components on {OCP}, due to current limitations
of Artifactory only the reverse proxy is deployed to {OCP} but Artifactory itself
is running on a separate host.

To deploy Artifactory a RHEL7.3 host needs to be provisioned, including a
OpenJDK Java runtime environment.

.Artifactory Component Overview
image::images/content-management-implementation.png[Artifactory Component Overview]

Deploying and registering the host is {oos}, the following repositories must be enabled:

[format="csv",cols="2"]
[options="header"]
[frame="topbot",grid="none"]
|====
Repository ID, Repository Name
rhel-7-server-rpms, Red Hat Enterprise Linux 7 Server (RPMs)
rhel-server-rhscl-7-rpms, Red Hat Software Collections RPMs for Red Hat Enterprise Linux 7 Server
|====

===== Artifactory on a separate host

Installing Artifactory is described in detail at https://www.jfrog.com/confluence/display/RTF/Installing+Artifactory[Installing Artifactory]
and could be used as a reference. This section summarizes the commands used:
```
$ wget https://bintray.com/jfrog/artifactory-pro-rpms/rpm -O bintray-jfrog-artifactory-pro-rpms.repo
$ mv bintray-jfrog-artifactory-pro-rpms.repo /etc/yum.repos.d/
$ yum install -y jfrog-artifactory-pro
```

Using PostgreSQL or MySQL or the embedded Derby database and how to configure it
is {oos}.

How to configure the PostgreSQL database is also covered in detail by the Artifactory
documentation chapter https://www.jfrog.com/confluence/display/RTF/PostgreSQL[Configuring the Database].

Please check that the artifactory service is enabled (use `systemctl enable artifactory`)
and started. You should see an output similar to this:

[source, bash]
----
# systemctl status artifactory
● artifactory.service - LSB: Start Artifactory on Tomcat
   Loaded: loaded (/etc/rc.d/init.d/artifactory; bad; vendor preset: disabled)
   Active: active (running) since Wed 2016-11-23 15:14:56 UTC; 6 days ago
     Docs: man:systemd-sysv-generator(8)
  Process: 14248 ExecStop=/etc/rc.d/init.d/artifactory stop (code=exited, status=0/SUCCESS)
  Process: 14330 ExecStart=/etc/rc.d/init.d/artifactory start (code=exited, status=0/SUCCESS)
 Main PID: 14387 (java)
   CGroup: /system.slice/artifactory.service
           ‣ 14387 //bin/java -Djava.util.logging.config.file=/opt/jfrog/artifactory/tomcat/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -server -Xms512m -Xmx2g -X...

Nov 23 15:14:51 acme-dev-infra-artifactory.acme.example.com systemd[1]: Starting LSB: Start Artifactory on Tomcat...
Nov 23 15:14:51 acme-dev-infra-artifactory.acme.example.com artifactory[14330]: /usr/bin/java
Nov 23 15:14:52 acme-dev-infra-artifactory.acme.example.com artifactory[14330]: Starting Artifactory tomcat as user artifactory...
Nov 23 15:14:52 acme-dev-infra-artifactory.acme.example.com su[14352]: (to artifactory) root on none
Nov 23 15:14:52 acme-dev-infra-artifactory.acme.example.com artifactory[14330]: Max number of open files: 32000
Nov 23 15:14:52 acme-dev-infra-artifactory.acme.example.com artifactory[14330]: Using ARTIFACTORY_HOME: /var/opt/jfrog/artifactory
Nov 23 15:14:52 acme-dev-infra-artifactory.acme.example.com artifactory[14330]: Using ARTIFACTORY_PID: /var/opt/jfrog/run/artifactory.pid
Nov 23 15:14:52 acme-dev-infra-artifactory.acme.example.com artifactory[14330]: Tomcat started.
Nov 23 15:14:56 acme-dev-infra-artifactory.acme.example.com artifactory[14330]: Artifactory Tomcat started in normal mode
Nov 23 15:14:56 acme-dev-infra-artifactory.acme.example.com systemd[1]: Started LSB: Start Artifactory on Tomcat.
----

To see Artifactory's log output `tail -f $ARTIFACTORY_HOME/logs/artifactory.log` could be used.

TIP: Don’t forget to install your Pro license key via the web user interface.

endif::artifactory-on-openshift[]

ifdef::artifactory-on-openshift[]

The following chapters will guide you thru the steps to build container images for Artifactory, create an application template for Artifactory on OpenShift and deploy all the components to OpenShift by using this template.

===== Building the Artifactory container image

Please change to `container-image/artifactory` and have a look at the `Makefile`, change
`REPOSITORY_NAME` according to your needs.

A simple `make push` should do the rest.

```
cd container-image/artifactory
make push
```

IMPORTANT: There is a build id in the `Makefile` and the `artifactory.yaml` and in the `Dockerfile`

`make push` will build and push the Pro and OSS version of Artifactory.

===== Creating Artifactory template

An OpenShift template is provided and could be used to instanciate new Artifactory
applications. Therefore the template needs to be created on OpenShift: `oc create -f artifactory.yaml`.
This assumes that you have created a project on OpenShift, for detailed instruction
see Creating a Project[https://docs.openshift.org/latest/dev_guide/projects.html#create-a-project].

===== Creating Artifactory application

Deploying Artifactory on OpenShift is a simple step of instanciating a new
application on OpenShift. To provide default configurations to Artifactory,
a ConfigMap will be used, this is not created by the template. Please create
it beforehand.

If you want to use the Pro version of Artifactory, please provide a license key
via the config map, and overwrite the *ARTIFACTORY_IMAGE_NAME* of the template.

===== Artifactory default Config Map

To configure Artifactory a config map is created from the contents of `etc-opt-jfrog-artifactory-dist/`.
The following files must be present:
```
-rw-rw-r--. 1 user group  9858 Oct 22 19:58 artifactory.config.xml
-rw-rw-r--. 1 user group   856 Oct 24 16:14 artifactory.lic
-rw-rw-r--. 1 user group 11045 Oct 22 19:58 artifactory.system.properties
-rw-rw-r--. 1 user group   476 Oct 22 19:58 default
-rw-rw-r--. 1 user group  6858 Oct 22 19:58 logback.xml
-rw-rw-r--. 1 user group  5546 Oct 22 19:58 mimetypes.xml
```

The file `artifactory.lic` is required only if using Pro version.

The following commands will create the config map and instanciate the new Artifactory application.

```
oc create configmap artifactory-default-config --from-file=etc-opt-jfrog-artifactory-dist/
oc new-app --template=acme-dev-infra/artifactory --param=ARTIFACTORY_IMAGE_NAME=artifactory-pro # or artifactory-oss
```

===== Initializing Artifactory

To get a quick start an Ansible playbook is provided to create a few repositories.
At least you need to customize the hostname of Artifactory, to see which hostname
is currently used, try `oc get route artifactory -o template --template={.spec.host}`.
This hostname should be set as variable `artifactory_host` in the playbook.

To execute the playbook run `cd playbooks && ansible-playbook create-default-repositories.yaml`. If the
repositories exists, failures will be shown, but ignored by the Ansible execution.
Please make sure that any Docker type repositories have Token Authentication
enabled.

WARNING: There is a race condition between the startup of PostgreSQL and Artifactory: you will see a Tomcat error page. Solving this is {oos}. An easy fix is to delete the artifactory-0 pod after it has started.

These steps are implemented and provided for your convenience as an <<https://github.com/goern/artifactory-on-openshift/blob/master/playbooks/create-default-repositories.yaml,Ansible playbook>>.

===== Remove application from OCP

```
oc scale deploymentconfig artifactory-postgresql --replicas=0
oc delete service artifactory
oc delete service artifactory-postgresql
oc delete petset artifactory
oc delete deploymentconfig artifactory-postgresql
oc delete routes artifactory
oc delete pod --all
oc delete imagestream artifactory
oc delete configmap artifactory-default-config
oc delete template artifactory
```

Persistent Volumes are not deleted using these commands.
endif::artifactory-on-openshift[]

==== Creating Repositories

To configure a set of standard repositories used in the course of the {RefImpl},
an <<https://github.com/goern/artifactory-on-openshift/blob/master/playbooks/create-default-repositories.yaml,Ansible playbook is provided>> which will create the following repositories:

.Artifactory default repositories
[format="csv",cols="4"]
[options="header"]
[frame="topbot",grid="none"]
|====
Key, Name, Type, Parent
generic-testing-local, , local generic, none
docker-testing-local, , local docker, none
docker-release-local, Local repository for container images, local docker, none
redhat-ga-remote, Red Hat GA repository, remote maven, none
jboss-fuse-remote, JBoss Fuse repository, remote maven, none
repo1-maven-org-remote, Maven Central, remote maven, none
npm-org-remote, npmjs.org, remote npm, none
bower-github-remote, Bower, remote bower, none
docker-io-remote, Docker Hub, remote docker, docker-registry
access-redhat-com-remote, Red Hat Customer Portal, remote docker, docker-registry
docker-registry, ACME Docker Registry, virtual docker, none
|====

To run this Ansible playbook, set the environment variable `ARTIFACTORY_API_URL` to Artifactory's API endpoint, in our {RefImpl} it is `http://acme-dev-infra-artifactory.acme.example.com/artifactory`.

The resulting Artifactory repository structure should look similar to the following screen shot.

.Artifactory Registry Overview
image::images/acme-dev-infra-artifactory.acme.example.com-docker-registry.png[Artifactory Registry Overview]


=== Deploying a Reverse Proxy

ifdef::artifactory-on-openshift[]
ifdef::artifactory-rev-proxy-on-openshift[]
As part of the Artifactory OpenShift template a NGINX-based reverse proxy will be deployed.
endif::artifactory-rev-proxy-on-openshift[]
endif::artifactory-on-openshift[]

ifndef::artifactory-on-openshift[]
ifdef::artifactory-rev-proxy-on-openshift[]
Even though Artifactory is deployed on a separate host, for this {RefImpl} the
reverse proxy will be deployed on {OCP}.

To deploy a NGINX-based reverse proxy on {OCP} three steps are required

1. get the NGINX configuration snippet from Artifactory
2. create a container image with NGINX and this configuration snippet
3. deploy an application based on the container image from step 2.

As a Source-to-Image build strategy will be used to create the deployable
container image, you need to initialize a new git repository and make it
available to your {OCP}.

Details how to create a S2I image can be found as part of the https://access.redhat.com/documentation/en/openshift-container-platform/3.3/paged/using-images/chapter-2-source-to-image-s2i[{OCP} documentation] and online at https://github.com/openshift/source-to-image[OpenShift's github repository].

TIP: You can find an example S2I NGINX repository at https://github.com/goern/s2i-nginx/tree/acme-it-dev

In summary, the NGINX Source-to-Image will copy and html, jpg, css (so called static files), a default NGINX configuration and all configuration snippets to a new container image. This new container image container a Red Hat Software Collections based installation of NGINX and a corresponding container entry point. If this image is deployed to {OCP} it will start NGINX on port 8080 and load all the configuration snippets and starts serving the static files.

We will use this pattern to configure NGINX to act as a reverse proxy for Artifactory.

So the next step will be, to configure the reverse proxy.

==== Obtaining NGINX configuration snippet from Artifactory

After you have created the S2I NGINX repository you need to add the Artifactory configuration snippet. Artifactory provides a restful API to do this, and the configuration snippet could be obtained very simple via `curl -gO http://artifactory.example.com:8081/api/system/configuration/reverseProxy/nginx`. Move this file into `etc/conf.d/artifactory.conf` of the S2I NGINX repository and add and commit it too.

The repository should look simular to this:

[source,bash]
----
$ ls -Rtln
.:
total 12
-rw-rw-r--. 1 1000 1000  321 Nov 22 09:59 nginx_rev_proxy.te # <1>
drwxrwxr-x. 2 1000 1000 4096 Nov 10 09:18 conf.d
drwxrwxr-x. 2 1000 1000 4096 Nov  7 13:15 html

./conf.d:
total 4
-rw-rw-r--. 1 1000 1000 1414 Dec  2 11:23 artifactory.conf # <2>

./html:
total 4
-rw-rw-r--. 1 1000 1000 150 Nov  7 13:16 index.html # <3>
----
<1> This file is provided for convenience, it is a SE Linux snippet used on a host based installation on NGINX
<2> This is the Artifactory configuration snippet retrieved from the restful API endpoint
<3> And this is a simple HTML not really needed to run the reverse proxy

TIP: Again, you can find an example repository at https://github.com/goern/artifactory-on-openshift/tree/master/container-image/reverse-proxy-nginx

==== Create NGINX container image using Source-to-Image

To create a container image out of the git repository assembled in the above step, you need to create a BuildConfig within {OCP} (and a corresponding ImageStream).

We provide `reverse-proxy.yaml` which is a complete declaration of all the {OCP} objects required to build and deploy a reverse proxy for Artifactory. It contains a few parameters, which are explained below. Details explanation of https://access.redhat.com/documentation/en/openshift-container-platform/3.3/single/developer-guide/#defining-a-buildconfig[{OCP} BuildConfig] is available on the {OCP} documentation.

Lets have a look at the BuildConfig first.

.Reverse Proxy BuildConfig
[source,yaml]
----
include::reverse-proxy.yaml[tags=BuildConfig]
----
<1> Name of the BuildConfig
<2> The git repository holding the source
<3> and a reference (branch or tag) within the repository
<4> the directory within the repository holding the source
<5> a builder image, in our case the S2I NGINX container image
<6> the output ImageStream including the tag

As you can see, the resulting container image is pushed into an ImageStream, therefor this object needs to be created within {OCP}:

.Reverse Proxy ImageStream
[source,yaml]
----
include::reverse-proxy.yaml[tags=ImageStream]
----
<1> Name of the ImageStream, without a tag

==== Deploy the NGINX-based reverse proxy application

After a successful build, the ImageStream will have the newest container image containing the Artifactory configuration snippet. To deploy this container image three additional objects are required:

1. a Route, to direct traffic from an internet domain name to the service provided
2. a Service, to direct traffic from the internet to the pods
3. a DeploymentConfig, to declare how new Pods get created

All of these three objects are declared within `reverse-proxy.yaml`, detailes are described below.

.Reverse Proxy Route
[source,yaml]
----
include::reverse-proxy.yaml[tags=Route]
----
<1> The domain name at which provides the service
<2> the service name traffic gets directrd to

.Reverse Proxy Service
[source,yaml]
----
include::reverse-proxy.yaml[tags=Service]
----
<1> The name of the service
<2> and a set of labels used to select the pods implementing the service

.Reverse Proxy DeploymentConfig
[source,yaml]
----
include::reverse-proxy.yaml[tags=DeploymentConfig]
----
<1> Name of the container image created by the BuildConfig

==== Using Ansible to deploy the NGINX-based reverse proxy application

All these objects could be created from an {OCP} template, and this could be automated with an Ansible playbook. Such a playbook is provided as https://github.com/goern/artifactory-on-openshift/blob/master/playbooks/deploy-service.yaml[`playbooks/deploy-service.yaml`]. All the tasks have been tagged, so you can easily select either to deploy Artifactory itself, or just the NGINX-based reverse proxy.

To deploy only the reverse proxy make sure that the following environment variables are set:

.Ansible environment variables
[options="header"]
[frame="topbot",grid="none"]
|====
| Environment Variable | Comment
| OCP_URL | URL of the {OCP} master API endpoint
| OCP_TOKEN | {OCP} token of user with role Platform Operator
|====

Use the Ansible playbook to deploy the NGINX-based reverse proxy for Artifactory by issuing the command

[source,bash]
----
$ ansible-playbook playbooks/deploy-service.yaml  --tags reverse-proxy
PLAY [Deploy Artifactory, see https://github.com/goern/artifactory-on-openshift] ***

 [... output delete ...]

PLAY RECAP *********************************************************************
localhost                  : ok=8    changed=6    unreachable=0    failed=0
----

Beside the fact that you may see a few warining or errors, none of the plays/tasks should fail. To validate that all objects required have been created you can use `oc get all --selector='application=s2i-nginx-acme'`.


endif::artifactory-rev-proxy-on-openshift[]
endif::artifactory-on-openshift[]

ifndef::artifactory-rev-proxy-on-openshift[]
==== Reverse Proxy - NGINX

Installing NGINX from the Red Hat Software Collections is just a short command sequence:

[source, bash]
----
$ yum install rh-nginx18
$ scl enable rh-nginx18 bash
$ systemctl enable rh-nginx18-nginx
----

Next step is to get the reverse proxy configuration for NGINX from Artifactory’s REST API, and start NGINX:


[source, bash]
----
$ cd /etc/opt/rh/rh-nginx18/nginx/conf.d/
$ curl -gO http://artifactory.example.com:8081/api/system/configuration/reverseProxy/nginx
$ systemctl start rh-nginx18-nginx
----

To check that NGINX is working as expected you could use
`curl -Lv http://artifactory.example.com/`, you should see that you are
redirected, and at the end the artifactory web user interface is presented.
endif::artifactory-rev-proxy-on-openshift[]

=== Testing the deployment

To test the Content Management deployment two steps are recommended:

a. log in to the docker registry
b. push a container image created locally

==== Log in to ACME Corp's docker registry

To log in to ACME Corp's docker registry you can either use the command line interface, or the https://www.jfrog.com/confluence/display/RTF/Docker+Registry#DockerRegistry-SetMeUp[web user interface]. The web user interface gives a step by step guidance how to log in. In addition to that a command line log in is shown:

[source, bash]
----
$ docker login docker-registry.artifactory.example.com # <1>
Username (admin): admin
Password: ****
Login Succeeded
----
<1> hostname of the reverse proxy

This command will add a section to `~/.docker/config.json`:

[source, json]
----
{
	"auths": {
		"docker-registry.artifactory.example.com": {
			"auth": "YWRtxxx6cGFzc3dvcmQ=",
			"email": "admin@example.com"
		}
	}
}
----

==== Pushing a container image

After successful log in, you can push a container image to ACME Corp's docker registry.

[source, bash]
----
$ docker tag 2266xxx0f568 docker-registry.artifactory.example.com/mongo-centos7:latest # <1>
$ docker push docker-registry.artifactory.example.com/mongo-centos7:latest # <2>
The push refers to a repository [docker-registry.artifactory.example.com/mongo-centos7]
7598xxx6ae9b: Pushed
b71axxx60164: Pushed
latest: digest: sha256:a4c5xxxfcdcb496bee9e19bdd29acd7881266b2e0d8781b20e923b6b6f4320f2 size: 741 # <3>
----
<1> tag a local container image with registry, name, tag
<2> push it to ACME Corp docker registry (the reverse proxy)
<3> the message that pushing finished successful

After `docker push` has finished, you should see that a new artifact is present within the `docker-release-local` repository. This proves:

1. the reverse proxy is working and connecting to its upstream server
2. you can authenticate with the ACME Corp's docker registry
3. the reverse proxy uploads files to its upstream server
4. Artifactory (the upstream server) stores all artifacts of the container image

.New container image
image::images/artifactory-after-docker-push.png[New container image]


== Using Artifactory with Source-to-Image (S2I) builds

Source-to-Image container images provided by Red Hat to be used with a BuildConfig are enabled to set proxies for Maven or NPM. This way Artifactory could be used to provide all the artifacts required during build time.

Setting the required environment variables could either be achieved via the https://docs.openshift.com/container-platform/3.4/dev_guide/builds.html#buildconfig-environment[BuildConfig] or by providing a custom layer ontop to Red Hat provided S2I container image. This layer will set the https://docs.openshift.com/container-platform/3.4/dev_guide/builds.html#environment-files[environment variables file].

This {RefImpl} provides an example within the `container-image/s2i-nginx-acme/` directory. The generated image could be used with any BuildConfig for a NodeJS project. The same could be accomplished for Java/Maven based builds by setting `MAVEN_MIRROR_URL` within the BuildConfig.

TIP: For a quick glimpse on this idea have a look at Appendix <<NodeJS S2I with Artifactory integrated>>.

Both alternatives are feasible to utilize Artifactory as an artifact cache during build time. Using the S2I approach will give Ops a little more control over Dev, as the environment variables is set with a same default value, so that even glibly developers will use Artifactory to seed up builds and/or only consume content under control and provided by Artifactory.


== Configure an OpenShift buildpipeline to use Artifactory

Beside S2I builds the OpenShift Build Pipeline is an additional method to build container images. An introduction to OpenShift Pipelines is available as an https://blog.openshift.com/openshift-3-3-pipelines-deep-dive/[OpenShift blog entry].

=== Required Jenkins plugins

To use Artifactory within a Jenkins pipeline you need to add the Artifactory Jenkins plugin to the container images from which Jenkins applications are created. How to add a plugin to the Jenkins container images is described by https://access.redhat.com/documentation/en/openshift-container-platform/3.4/single/using-images/#jenkins-as-s2i-builder[Using Jenkins as a Source-To-Image builder], please add https://wiki.jenkins-ci.org/display/JENKINS/Artifactory+Plugin[Artifactory Plugin] using this method.

In addition to the plugin itself, a default configuration could be added to the ACME Corp Jenkins container image. For the ACME Corp this configuration look like the following example.

.Artifactory Jenkins plugin configuration example
[source]
----
<?xml version='1.0' encoding='UTF-8'?>
<org.jfrog.hudson.ArtifactoryBuilder_-DescriptorImpl plugin="artifactory@2.8.1">
  <useCredentialsPlugin>false</useCredentialsPlugin>
  <artifactoryServers>
    <org.jfrog.hudson.ArtifactoryServer>
      <url>http://artifactory.example.com/artifactory</url> <1>
      <id>acme-dev-infra-artifactory</id>
      <timeout>300</timeout>
      <bypassProxy>false</bypassProxy>
      <deployerCredentialsConfig>
        <credentials> <2>
          <username>admin</username>
          <password>password</password>
        </credentials>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </deployerCredentialsConfig>
    </org.jfrog.hudson.ArtifactoryServer>
  </artifactoryServers>
  <pushToBintrayEnabled>false</pushToBintrayEnabled>
  <buildInfoProxyEnabled>false</buildInfoProxyEnabled>
  <buildInfoProxyPort>0</buildInfoProxyPort>
  <buildInfoProxyCertPublic>/var/lib/jenkins/secrets/jfrog/certs/jfrog.proxy.crt</buildInfoProxyCertPublic>
  <buildInfoProxyCertPrivate>/var/lib/jenkins/secrets/jfrog/certs/jfrog.proxy.key</buildInfoProxyCertPrivate>
</org.jfrog.hudson.ArtifactoryBuilder_-DescriptorImpl>
----
<1> This is the URL of Artifactory deployed on {ocp}
<2> username and password need to be provided to upload artifacts

How to https://access.redhat.com/documentation/en/openshift-container-platform/3.4/single/using-images/#jenkins-creating-jenkins-service-from-template[Creating a Jenkins Service from a Template] is described by the OpenShift documentation, please make sure that the Jenkins application is created from the ACME Corp Jenkins container image containing the Artifactory plugin.

TIP: A fully working example of an Jenkins container image with Artifactory plugin and additional plugins is available online at https://github.com/goern/jenkins-acme

=== Jenkinsfile example

After Jenkins and all the required plugins are set up and ready to use, a BuildConfig with JenkinsPipeline strategy could be created. This BuildConfig will utilize an OpenShift service by the name of 'jenkins' to execute the pipeline defined by the either inlined Jenkinsfile or by a Jenkinsfile provided with the source code you are building from. If this service does not exist, {ocp} will deploy it from a template, more details can be found at https://access.redhat.com/documentation/en/openshift-container-platform/3.4/single/using-images/#jenkins-creating-jenkins-service-from-template[Creating a Jenkins Service from a Template].

[source]
----
kind: BuildConfig
apiVersion: v1
metadata:
  annotations:
    pipeline.alpha.openshift.io/uses: '[{"name": "eap-app", "namespace": "", "kind": "DeploymentConfig"}]'
  name: eap-app-pipeline
spec:
  strategy:
    type: JenkinsPipeline
    jenkinsPipelineStrategy: {} <4>
  source:
    contextDir: kitchensink <2>
    git:
      ref: acme-demo <3>
      uri: https://github.com/goern/jboss-eap-quickstarts.git <1>
    type: Git
  output:
    to:
      kind: ImageStreamTag
      name: eap-app:latest
----
<1> git repository location of the source code
<2> directory within the repository that holds the source code
<3> git branch to be used
<4> empty jenkinsPipelineStrategy will make use of an Jenkinsfile provided with source code

Details regarding the BuildConfig can be found at https://access.redhat.com/documentation/en/openshift-container-platform/3.4/single/developer-guide/#pipeline-strategy-options[Pipeline Strategy Options] chapter of the {ocp} documentation.

With the example above a Jenkinsfile provided with the source code is used, rather than an inlined Jenkinsfile definition. This Jenkins pipleline could look like the following snippet.

.Jenkinsfile snippet - configure and build
[source]
----
node('maven') { // this will use maven jenkins slave containers...
  def artifactory = Artifactory.server('artifactory.example.com') // <1>
  def artifactoryMaven = Artifactory.newMavenBuild() // <2>
  def buildInfo = Artifactory.newBuildInfo()

  stage('Artifactory: configuration') { // <3>
    artifactoryMaven.tool = "Maven3" // Tool name from Jenkins configuration
    artifactoryMaven.deployer releaseRepo:'libs-release-local', snapshotRepo:'libs-snapshot-local', server: artifactory
    artifactoryMaven.resolver releaseRepo:'libs-release', snapshotRepo:'libs-snapshot', server: artifactory

    buildInfo.env.capture = true
    buildInfo.retention maxBuilds: 10, maxDays: 7, deleteBuildArtifacts: true
  }

  stage('SCM: checkout') {
    git url: 'https://github.com/goern/jboss-eap-quickstarts.git', branch: 'acme-demo'
  }

  stage('Maven: build') { // <4>
    artifactoryMaven.run pom: 'kitchensink/pom.xml', goals: 'clean install', buildInfo: buildInfo
  }
}
----
<1> define the Artifactory service to be used
<2> some additional Artifactory configurations
<3> configuration of the Maven build
<4> use Maven with its Artifactory configuration to build

This Jenkins pipeline snippet will define some Artifactory related variables and configure Maven related items of the Artifactory plugin. After the source code has been checked out, a Maven build using the Artifactory configuration is started. Any build artifacts will exist within the Maven container's storage, they are neither packaged into a container image, nor are they uploaded to Artifactory. Processing the build artifacts is the responsibility of follow on pipeline stages.

A detailed documentation of the Artifactory Jenkins plugin configuration and usage is provided by https://wiki.jenkins-ci.org/display/JENKINS/Artifactory+-+Working+With+the+Pipeline+Jenkins+Plugin#Artifactory-WorkingWiththePipelineJenkinsPlugin-CreatinganArtifactoryServerInstance[Artifactory - Working With the Pipeline Jenkins Plugin]

== Pushing build artifacts to Artifactory

To upload (or download) build artifacts to (from) Artifactory a corresponding spec needs to be defined as described by https://wiki.jenkins-ci.org/display/JENKINS/Artifactory+-+Working+With+the+Pipeline+Jenkins+Plugin#Artifactory-WorkingWiththePipelineJenkinsPlugin-UploadingandDownloadingFiles[Uploading and Downloading Files] chapter of Artifactory documentation.

Uploading the build artifacts will result in an updated buildInfo, which will then be published into Artifactory.

The following snippet illustrates these basic steps.

.Jenkinsfile snippet - uploading/pushing build artifacts
[source]
----
def downloadSpec = """{ <1>
  "files": [
  ]
}"""
def uploadSpec = """{ <2>
  "files": [
    {
      "pattern": "jboss-kitchensink.war",
      "target": "libs-snapshot-local"
    }
  ]
}"""

node('maven') { // this will use maven jenkins slaves...
  stage('Maven: upload artifact to repository') {
    echo 'This stage should upload all artifacts to the central Repository'

    artifactory.download(downloadSpec, buildInfo) <3>
    artifactory.upload(uploadSpec, buildInfo)
    artifactory.publishBuildInfo buildInfo <4>
  }
}
----
<1> define download spec
<2> and upload spec
<3> configure Artifactory to use the specs
<4> and push the build info defined earlier

TIP: The username and password configured within the Artifactory plugin configuration (included in the Jenkins container image) is used to upload, download or publish information to Artifactory.

A detailed documentation of the Artifactory Jenkins plugin configuration and usage is provided by https://wiki.jenkins-ci.org/display/JENKINS/Artifactory+-+Working+With+the+Pipeline+Jenkins+Plugin#Artifactory-WorkingWiththePipelineJenkinsPlugin-CreatinganArtifactoryServerInstance[Artifactory - Working With the Pipeline Jenkins Plugin]
