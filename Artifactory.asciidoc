== Central Service: Artifact Repository

* for many kind of artifacts
* an ingress and remix point

=== Building the Artifactory container image

Please change to `container-image` and have a look at the `Makefile`, change
`REPOSITORY_NAME` according to your needs.

A simple `make push` should do the rest.

```
cd container-image
make push
```

Mind the Gap! There is a build id in the `Makefile` and the `openshift-template.yaml` and in the `Dockerfile`

`make push` will build and push the Pro and OSS version of Artifactory.

=== Creating Artifactory template

An OpenShift template is provided and could be used to instanciate new Artifactory
applications. Therefore the template needs to be created on OpenShift: `oc create -f openshift-template.yaml`.
This assumes that you have create a project on OpenShift, for detailed instruction
see Creating a Project[https://docs.openshift.org/latest/dev_guide/projects.html#create-a-project].

=== Creating Artifactory application

Deploying Artifactory on OpenShift is a simple step of instanciating a new
application on OpenShift. To provide default configurations to Artifactory,
a ConfigMap will be used, this is not created by the template. Please create
it beforehand.

If you want to use the Pro version of Artifactory, please provide a license key
via the config map, and overwrite the *ARTIFACTORY_IMAGE_NAME* of the template.

==== Artifactory default Config Map

To configure Artifactory a config map is created from the contents of `etc-opt-jfrog-artifactory-dist/`.
The following files must be present:
```
-rw-rw-r--. 1 user group  9858 Oct 22 19:58 artifactory.config.xml
-rw-rw-r--. 1 user group   856 Oct 24 16:14 artifactory.lic
-rw-rw-r--. 1 user group 11045 Oct 22 19:58 artifactory.system.properties
-rw-rw-r--. 1 user group   476 Oct 22 19:58 default
-rw-rw-r--. 1 user group  6858 Oct 22 19:58 logback.xml
-rw-rw-r--. 1 user group  5546 Oct 22 19:58 mimetypes.xml
```

Especially `artifactory.lic` is required if you run the Pro version.

The following commands will create the config map and instanciate the new Artifactory
application.

```
oc create configmap artifactory-default-config --from-file=etc-opt-jfrog-artifactory-dist/
oc new-app --template=acme-dev-infra/artifactory --param=ARTIFACTORY_IMAGE_NAME=artifactory-pro # or artifactory-oss
```

=== Initializing Artifactory

To get a quick start an Ansible playbook is provided to create a few repositories.
At least you need to customize the hostname of Artifactory, to see which hostname
is currently used, try `oc get route artifactory -o template --template={{.spec.host}}`.
This hostname should be set as variable `artifactory_host` in the playbook.

To execute the playbook run `cd playbooks && ansible-playbook create-default-repositories.yaml`. If the
repositories exists, failures will be shown, but ignored by the ansible execution.

These steps are implemented and provided for your convenience as an <<playbooks/deploy-service.yaml#Ansible playbook,Ansible playbook>>.

=== Remove application from OCP

```
oc scale deploymentconfig artifactory-postgresql --replicas=0
oc delete service artifactory
oc delete service artifactory-postgresql
oc delete petset artifactory
oc delete deploymentconfig artifactory-postgresql
oc delete routes artifactory
oc delete pod --all
oc delete imagestream artifactory
oc delete configmap artifactory-default-config
oc delete template artifactory
```

Persistent Volumes are not deleted using these commands.
