=== Integrating {Artifactory} with OpenShift's NodeJS Source-to-Image

The following chapters will describe two alternatives how to integrate {Artifactory} as a NPM registry with OpenShift's NodeJS Source-to-Image.

The first alternative is focused on developer freedom and DevOps providing the {Artifactory} service as an option to speed up builds. The second alternative is about govern the content developers can use, to archive this, {acme}'s DevOps forces each NodeJS build to use {Artifactory} as the only (authoritative) source of NPM packages.

==== Using a Red Hat supplied NodeJS Source-to-Image container image

Providing developer with an opportunity to speed up their NodeJS build by providing a {Artifactory} NPM repository, this should be configured to be a remote repository of registry.npm.org.

Each developer is now free to use this service or not. If it should be used, it is as simple as configuring a Source Build using a NodeJS {s2i} image and provide the `NPM_MIRROR` environment variable. Configuring is described in detail as part of  https://access.redhat.com/documentation/en-us/openshift_container_platform/3.4/html/using_images/source-to-image-s2i#nodejs-configuration[Chapter 2. Source-to-Image (S2I)]. An example of this could be found as part of OpenShift Origin:

==== Using a ACME Corp DevOps supplied NodeJS Source-to-Image container image

The second alternative is more restrictive, and does not provide any configuration option to the developer. In fact it enforces a policy set by DevOps: "Only NPM packages from {acme}'s NPM registry must be used with builds." To archive this, DevOps provides a NodeJS {s2i} container image, while removing any other provided by Red Hat, that is used by Devs.

With https://github.com/goern/artifactory-on-openshift[artifactory-on-openshift] a whole example is provided. It consists of:

1. an ImageStream to represent {acme}'s NodeJS {s2i} container image
2. a BuildConfig to create that https://github.com/goern/artifactory-on-openshift/tree/master/container-image/s2i-node-acme[image containing {acme} configuration]
3. a BuildConfig for the https://github.com/openshift/nodejs-ex[OpenShift NodeJS example]
4. a https://github.com/goern/artifactory-on-openshift/blob/master/nodejs-artifactory-example.yaml[Template to create all these configuration items]

To fully deploy this example, use the following steps:

[source, bash]
----
$ oc create -f https://github.com/goern/artifactory-on-openshift/blob/master/nodejs-artifactory-example.yaml
template "nodejs-artifactory-example" created
$ oc new-app nodejs-artifactory-example
--> Deploying template "nodejs-acme-example/nodejs-artifactory-example" to project nodejs-acme-example

     Node.js ACME Example
     ---------
     This is an example of NodeJS using Artifactory as a NPM mirror/cache

     * With parameters:
        * Name=nodejs-artifactory-example
        * Memory Limit=512Mi
        * Application Hostname=

--> Creating resources ...
    service "nodejs-artifactory-example" created
    route "nodejs-artifactory-example" created
    deploymentconfig "nodejs-artifactory-example" created
    buildconfig "nodejs-artifactory-example" created
    buildconfig "nodejs-acme" created
    imagestream "nodejs-acme" created
--> Success
    Build scheduled, use 'oc logs -f bc/nodejs-artifactory-example' to track its progress.
    Build scheduled, use 'oc logs -f bc/nodejs-acme' to track its progress.
    Run 'oc status' to view your app.
$
----

After a while `oc status` will show you that an {acme} NodeJS {s2i} have been build, and that this has been used to build a NodeJS application. This has been deployed and is available via a route.

As you can see there is a hard coded npm proxy setting with {acme}'s NodeJS {s2i}, this way the use of {Artifactory} as the only NPM registry could be enforced. To enforce this setting, {acme}'s DevOps has created a custom {s2i} assemble script, see <<ACME Corp S2I assemble script>> for an example. This custom assemble script is used on top of the Red Hat provided NodeJs {s2i} image by adding some layers via a Dockerfile (and creating a <<Using a ACME Corp DevOps supplied NodeJS Source-to-Image container image, corresponding BuildConfig>>)
